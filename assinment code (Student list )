#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100
#define MAX_NAME_LEN 50
#define MAX_EMAIL_LEN 50
#define MAX_ROLL_NO_LEN 10

typedef struct {
    char name[MAX_NAME_LEN];
    char email[MAX_EMAIL_LEN];
    char roll_no[MAX_ROLL_NO_LEN];
} Student;

int read_students_from_csv(const char *filename, Student students[]) {
    FILE *fp = fopen(filename, "txt.c");
    if (fp == NULL) {
        perror("Error opening file");
        return -1;
    }

    int num_students = 0;
    char line[100];
    while (fgets(line, sizeof(line), fp) != NULL) {
        if (num_students >= MAX_STUDENTS) {
            fprintf(stderr, "Maximum number of students reached.\n");
            break;
        }

        char *token = strtok(line, ",");
        if (token == NULL) {
            continue; // Empty line
        }

        strcpy(students[num_students].name, token);
        token = strtok(NULL, ",");
        strcpy(students[num_students].email, token);
        token = strtok(NULL, ",");
        strcpy(students[num_students].roll_no, token);

        num_students++;
    }

    fclose(fp);
    return num_students;
}

int search_student(const Student students[], int num_students, const char *search_term, int search_by) {
    for (int i = 0; i < num_students; i++) {
        switch (search_by) {
            case 1: // Search by name
                if (strstr(students[i].name, search_term) != NULL) {
                    return i;
                }
                break;
            case 2: // Search by roll number
                if (strcmp(students[i].roll_no, search_term) == 0) {
                    return i;
                }
                break;
            case 3: // Search by email
                if (strcmp(students[i].email, search_term) == 0) {
                    return i;
                }
                break;
        }
    }
    return -1; // Student not found
}

void modify_student(Student *student) {
    printf("Enter new name: ");
    scanf("%s", student->name);
    printf("Enter new email: ");
    scanf("%s", student->email);
    printf("Enter new roll number: ");
    scanf("%s", student->roll_no);
}

void write_students_to_csv(const char *filename, const Student students[], int num_students) {
    FILE *fp = fopen(filename, "w");
    if (fp == NULL) {
        perror("Error opening file");
        return;
    }

    for (int i = 0; i < num_students; i++) {
        fprintf(fp, "%s,%s,%s\n", students[i].name, students[i].email, students[i].roll_no);
    }

    fclose(fp);
}

int main() {
    Student students[MAX_STUDENTS];
    int num_students = read_students_from_csv("students.csv", students);
    if (num_students < 0) {
        return 1;
    }

    while (1) {
        printf("\n1. Search student\n2. Exit\n");
        int choice;
        scanf("%d", &choice);

        if (choice == 1) {
            printf("\n1. Search by name\n2. Search by roll number\n3. Search by email\n");
            scanf("%d", &choice);

            char search_term[MAX_NAME_LEN];
            printf("Enter search term: ");
            scanf("%s", search_term);

            int index = search_student(students, num_students, search_term, choice);
            if (index == -1) {
                printf("Student not found.\n");
            } else {
                printf("Student found:\n");
                printf("Name: %s\n", students[index].name);
                printf("Email: %s\n", students[index].email);
                printf("Roll number: %s\n", students[index].roll_no);

                printf("\n1. Search again\n2. Modify student details\n");
                scanf("%d", &choice);

                if (choice == 2) {
                    modify_student(&students[index]);
                    write_students_to_csv("students.csv", students, num_students);
                    printf("Student details modified successfully.\n");
                }
            }
        } else if (choice == 2) {
            break;
        } else {
            printf("Invalid choice.\n");
        }
    }

    return 0;
}
